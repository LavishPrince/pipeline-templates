# .github/workflows/ios-build.yml
name: iOS Build and Deploy
on:
  workflow_dispatch:
jobs:
  ios-build-and-upload:
    runs-on: macos-latest # Uses macOS runner with Xcode pre-installed

    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.2"
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js 22
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Fastlane
        run: |
          brew install  --formulae fastlane cocoapods eza

      - name: Install npm dependencies
        run: npm install

      - name: Set up provisioning profile
        run: mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles && echo "$PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
        env:
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}

      - name: Set up certificate
        run: |
          echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
          security create-keychain -p "github" build.keychain
          security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s ~/Library/Keychains/build.keychain
          security list-keychains -s build.keychain
          security unlock-keychain -p "github" build.keychain
          security set-keychain-settings build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "github" build.keychain
        env:
          CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
          CERT_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Build iOS App
        env:
          TEAM_ID: ${{ secrets.GYM_EXPORT_TEAM_ID }}
          CERT_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          cd ios
          chmod -R 777 .
          build_number=$(date +"%Y%m%d%H%M%S")
          echo $build_number
          plutil -create xml1 ExportOptions.plist
          plutil -insert method -string "app-store-connect" ExportOptions.plist
          plutil -insert compileBitcode -bool false ExportOptions.plist
          plutil -insert uploadSymbols -bool false ExportOptions.plist
          PROFILES_JSON="{"
          PROFILES_JSON+="\"org.reactjs.native.example.IosGithubActionBuild\": \"app-store-profile-sample-github-actions\","
          PROFILES_JSON+="}"
          plutil -insert provisioningProfiles -json "$PROFILES_JSON" ExportOptions.plist
          plutil -p ExportOptions.plist


          # cat ExportOptions.plist
          rm -rf ~/Library/Developer/Xcode/DerivedData
          pod deintegrate || true
          pod install --repo-update
             
          fastlane run update_project_team path:"./IosGithubActionBuild.xcodeproj" teamid:"$TEAM_ID"
          fastlane run increment_build_number build_number:"$build_number"
          fastlane run build_ios_app \
            scheme:"IosGithubActionBuild" \
            workspace:"IosGithubActionBuild.xcworkspace" \
            export_method:"app-store" \
            output_directory:"./build" \
            output_name:"GenericBuild.ipa" \
            include_symbols:"false" \
            include_bitcode:"false" \
            destination:"generic/platform=iOS" \
            configuration:"Release" \
            export_options:"ExportOptions.plist" \
            clean:"true" \
            suppress_xcode_output:"true" \
            xcargs:"CODE_SIGN_IDENTITY='iPhone Distribution' CODE_SIGN_STYLE=Manual PROVISIONING_PROFILE_SPECIFIER='app-store-profile-sample-github-actions'"
            eza --tree build

      - name: Ios App Upload

        run: |
          cd ios
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}" | base64 --decode > api_key.p8
          cat > fastlane/Fastfile << 'EOF'
          default_platform(:ios)
            platform :ios do
                lane :beta do
                  api_key = app_store_connect_api_key(
                    key_id: "${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}",
                    issuer_id: "${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}",
                    key_filepath: "./api_key.p8"
                  )

                      upload_to_testflight(
                        ipa: "./build/GenericBuild.ipa",
                        api_key: api_key,
                        skip_waiting_for_build_processing: true,
                      )
                end
              end

      - name: upload
        run: cd ios && cat fastlane/Fastfile  && fastlane ios beta # fastlane ios beta

      - name: Cleanup
        if: always()
        run: |
          # Remove the decrypted certificate and provisioning profile
          rm -rf certificate.p12 profile.mobileprovision
          rm -rf ios/api_key.p8
          # Delete the keychain after the build process
          security delete-keychain build.keychain
